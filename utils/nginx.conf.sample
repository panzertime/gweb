user  nobody nogroup;
worker_processes  1;

error_log  /var/log/nginx/error.log;

events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    sendfile        on;

    keepalive_timeout  65;

    # Set some rate limits here.
    limit_req_zone $binary_remote_addr zone=slow:10m rate=60r/m;
    limit_req_zone $binary_remote_addr zone=fast:10m rate=10r/s;
    limit_conn_zone $binary_remote_addr zone=addr:10m;

    # Here is a sample Unix socket configuration. 
    # Change this if your Unix socket is elsewhere, you're using TCP,
    # or you're not using gunicorn.
    upstream app_server {
            server unix:/tmp/gunicorn.sock fail_timeout=0;
    }

    # You can host your MP3s on a separate domain.
    server {
        listen       443 ssl;
        server_name  static-files.example.com;

        # Use SSL or be square.
        ssl_certificate ...
        ssl_certificate_key ...
        ssl_ciphers         ...
        ssl_protocols       ...

        # You can rate limit the MP3s aggressively
        limit_req zone=slow;
        limit_conn addr 1;

        if ($scheme = http) {
                return 301 https://$server_name$request_uri;
        }

        # Set this to the path of your gPodder downloads folder
        location / {
                root ...;
        }
    }

    # This is the reverse proxy to your uWSGI application server.
    server {
        listen       443 default_server ssl;
        server_name  example.com;

        # Use SSL or be square.
        ssl_certificate ...
        ssl_certificate_key ...
        ssl_ciphers         ...
        ssl_protocols       ...

        # The page will load a handful of requests and then none.
        limit_req zone=fast burst=12 delay=4;
        limit_conn addr 2;

        # Set this to the place the static webapp files are stored:
        root /path/to/gweb/webapp/static;
        rewrite  ^/$  /index.html  permanent;

        if ($scheme = http) {
                return 301 https://$server_name$request_uri;
        }

        location / {
                try_files $uri @proxy_to_app;
        }

        location @proxy_to_app {
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_set_header Host $http_host;
                proxy_redirect off;
                proxy_pass http://app_server;
        }
    }
}